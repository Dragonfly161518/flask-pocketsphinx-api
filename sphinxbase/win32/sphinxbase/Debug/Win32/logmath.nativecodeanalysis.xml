<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>102</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>6297</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION>
    <FUNCTION>logmath_init</FUNCTION>
    <DECORATED>logmath_init</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>124</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>6297</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION>
    <FUNCTION>logmath_init</FUNCTION>
    <DECORATED>logmath_init</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>102</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '&lt;&lt;' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '&lt;&lt;' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>logmath_init</FUNCTION>
    <DECORATED>logmath_init</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>124</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '&lt;&lt;' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '&lt;&lt;' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>logmath_init</FUNCTION>
    <DECORATED>logmath_init</DECORATED>
    <FUNCLINE>62</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>458</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>6297</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION>
    <FUNCTION>logmath_exp</FUNCTION>
    <DECORATED>logmath_exp</DECORATED>
    <FUNCLINE>456</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>458</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '&lt;&lt;' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '&lt;&lt;' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>logmath_exp</FUNCTION>
    <DECORATED>logmath_exp</DECORATED>
    <FUNCLINE>456</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>470</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6297</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION>
    <FUNCTION>logmath_log_to_ln</FUNCTION>
    <DECORATED>logmath_log_to_ln</DECORATED>
    <FUNCLINE>468</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>470</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '&lt;&lt;' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '&lt;&lt;' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>logmath_log_to_ln</FUNCTION>
    <DECORATED>logmath_log_to_ln</DECORATED>
    <FUNCLINE>468</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>492</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6297</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION>
    <FUNCTION>logmath_log_to_log10</FUNCTION>
    <DECORATED>logmath_log_to_log10</DECORATED>
    <FUNCLINE>490</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\resource dper\logic\sphinxbase\src\libsphinxbase\util</FILEPATH>
      <FILENAME>logmath.c</FILENAME>
      <LINE>492</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '&lt;&lt;' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '&lt;&lt;' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>logmath_log_to_log10</FUNCTION>
    <DECORATED>logmath_log_to_log10</DECORATED>
    <FUNCLINE>490</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>